<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rookey.Frame.Email</name>
    </assembly>
    <members>
        <member name="T:Rookey.Frame.Email.WebEmailHelper">
            <summary>
            WebMail api
            </summary>
        </member>
        <member name="M:Rookey.Frame.Email.WebEmailHelper.SendByWebMail(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String)">
            <summary>
            发送邮件，WebMail方式
            </summary>
            <param name="smtpServer">smtp服务器</param>
            <param name="smtpPort">smtp端口号</param>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <param name="subject">主题</param>
            <param name="body">内容</param>
            <param name="to">收件人</param>
            <param name="fileAttachList">附件</param>
            <param name="from">发送人描述</param>
            <param name="cc">抄送人</param>
            <param name="bcc">密送人</param>
            <returns>返回异常信息</returns>
        </member>
        <member name="T:Rookey.Frame.Email.EmailAddrType">
            <summary>
            接收邮件地址类型
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.EmailAddrType.From">
            <summary>
            发件人
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.EmailAddrType.To">
            <summary>
            收件人
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.EmailAddrType.CC">
            <summary>
            抄送人
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.EmailAddrType.Bcc">
            <summary>
            密送人
            </summary>
        </member>
        <member name="T:Rookey.Frame.Email.EmailType">
            <summary>
            邮箱类型
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.EmailType.Gmail">
            <summary>
            Google 的网络邮件服务
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.EmailType.HotMail">
            <summary>
            HotMail/Live
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.EmailType.QQ_FoxMail">
            <summary>
            QQ/FoxMail（Foxmail被腾讯收购）
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.EmailType.Mail_126">
            <summary>
            网易126
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.EmailType.Mail_163">
            <summary>
            网易163
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.EmailType.Sina">
            <summary>
            新浪邮箱
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.EmailType.Tom">
            <summary>
            Tom
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.EmailType.SoHu">
            <summary>
            搜狐邮箱
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.EmailType.Yahoo">
            <summary>
            雅虎邮箱
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.EmailType.Customer">
            <summary>
            自定义邮箱类型
            </summary>
        </member>
        <member name="T:Rookey.Frame.Email.MailInfoType">
            <summary>
            发邮件错误信息
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.MailInfoType.FromEmpty">
            <summary>
            发信人的电子邮件地址未设置
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.MailInfoType.ToEmpty">
            <summary>
            收件人的电子邮件地址未设置
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.MailInfoType.SmtpClientEmpty">
            <summary>
            SmtpClient 实例未设置
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.MailInfoType.HostEmpty">
            <summary>
            SMTP主服务器未设置
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.MailInfoType.CertificateEmpty">
            <summary>
            若SMTP启用ssl，则证书不能为空      根据 SmtpClient.EnableSsl 属性来判断
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.MailInfoType.FromFormat">
            <summary>
            发信人的电子邮件地址格式错误
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.MailInfoType.ToFormat">
            <summary>
            收件人的电子邮件地址格式错误
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.MailInfoType.SubjectEmpty">
            <summary>
            邮件主题为空
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.MailInfoType.BodyEmpty">
            <summary>
            邮件内容为空  （若有附件不能算为空）
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.MailInfoType.CCFormat">
            <summary>
            抄送人的电子邮件地址格式错误
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.MailInfoType.BccFormat">
            <summary>
            密送人的电子邮件地址格式错误
            </summary>
        </member>
        <member name="M:Rookey.Frame.Email.MailInfoHelper.ExistsError(System.Collections.Generic.Dictionary{Rookey.Frame.Email.MailInfoType,System.String})">
            <summary>
            根据信息集合判断是否包含错误
            （MailInfoType 枚举值为10-69 会 导致发送邮件错误的信息）
            </summary>
            <param name="dicMsg">信息集合</param>
            <returns>true：包含错误；false：包含提示信息或者待检查集合为空</returns>
        </member>
        <member name="M:Rookey.Frame.Email.MailInfoHelper.GetMailInfoStr(System.Collections.Generic.Dictionary{Rookey.Frame.Email.MailInfoType,System.String})">
            <summary>
            获取邮件发送错误和提示信息字符串合集
            </summary>
            <param name="dicMsg">邮件发送错误和提示</param>
            <returns></returns>
        </member>
        <member name="T:Rookey.Frame.Email.MailValidatorHelper">
            <summary>
            邮件验证帮助类
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.MailValidatorHelper.Options">
            <summary>
            数据验证类使用的正则表述式选项
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.MailValidatorHelper.EmailRegex">
            <summary>
            检测字符串是否为有效的邮件地址捕获正则
            </summary>
        </member>
        <member name="M:Rookey.Frame.Email.MailValidatorHelper.IsEmail(System.String)">
            <summary>
            检测字符串是否为有效的邮件地址
            </summary>
            <param name="input">需要检查的字符串</param>
            <returns>如果字符串为有效的邮件地址，则为 true；否则为 false。</returns>
        </member>
        <member name="M:Rookey.Frame.Email.MailValidatorHelper.ValideArgumentNull``1(``0,System.String)">
            <summary>
            验证对象是否为null，并抛出异常
            </summary>
            <param name="argValue">参数值</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:Rookey.Frame.Email.MailValidatorHelper.ValideArgumentNull``1(``0,System.String,System.String)">
            <summary>
            验证对象是否为null，并抛出异常
            </summary>
            <param name="paramName">参数名</param>
            <param name="argValue">参数值</param>
            <param name="message">提示信息</param>
        </member>
        <member name="M:Rookey.Frame.Email.MailValidatorHelper.ValideStrNullOrEmpty(System.String,System.String)">
            <summary>
            验证对象是否为null，并抛出异常
            </summary>
            <param name="paramName">参数名</param>
            <param name="argValue">参数值</param>
            <param name="message">提示信息</param>
        </member>
        <member name="M:Rookey.Frame.Email.MailValidatorHelper.ValideStrNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            验证对象是否为null，并抛出异常
            </summary>
            <param name="paramName">参数名</param>
            <param name="argValue">参数值</param>
            <param name="message">提示信息</param>
        </member>
        <member name="T:Rookey.Frame.Email.MailHelper">
            <summary>
            非线程安全类
            使用注意事项：
            1、该类无需（也不能）在外部包裹多线程，因为内部有提供“异步发送”方法，内、外都使用多线程会导致线程池对可用资源的误判，从而创建过多阻塞线程。
            2、MailHelper类的 m_autoDisposeSmtp 属性的使用，具体见此字段注释。
            3、启用 UTF-8 字符编码
            </summary>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.#ctor(System.Boolean)">
            <summary>
            构建 MailHelper 实例
            </summary>
            <param name="isAsync">是否启用异步邮件发送，默认为同步发送</param>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.#ctor(System.Net.Mail.SmtpClient,System.Boolean,System.Boolean)">
            <summary>
            构建 MailHelper 实例
            </summary>
            <param name="mSmtpClient">SmtpClient实例</param>
            <param name="autoReleaseSmtp">是否自动释放SmtpClient实例</param>
            <param name="isAsync">是否启用异步邮件发送</param>
        </member>
        <member name="F:Rookey.Frame.Email.MailHelper.m_autoDisposeSmtp">
            <summary>
            默认为false。设置在 MailHelper 类内部，发送完邮件后是否自动释放 SmtpClient 实例
            Smtp不管是在 MailHelper 内部还是在外部都必须进行主动释放，
            因为：SmtpClient 没有提供 Finalize() 终结器，所以GC不会进行回收，只能使用完后主动进行释放，否则会发生内存泄露问题。
            
            何时将 autoReleaseSmtp 设置为false，就是SmtpClient需要重复使用的情况，即需要使用“相同MailHelper”向“相同Smtp服务器”发送大批量的邮件时。
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.MailHelper.m_DicTo">
            <summary>
            设置此电子邮件的收件人的地址集合。
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.MailHelper.m_DicCC">
            <summary>
            设置此电子邮件的抄送 (CC) 收件人的地址集合。
            </summary>
        </member>
        <member name="F:Rookey.Frame.Email.MailHelper.m_DicBcc">
            <summary>
            设置此电子邮件的密件抄送 (BCC) 收件人的地址集合。
            </summary>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.Reset">
            <summary>
            重置 MailHelper 实例信息 
            不释放 SmtpClient 实例和相关的AutoReleaseSimple字段，因为存在异步发送。。这两个字段由SetSmtpClient方法设置
            </summary>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.ExistsSmtpClient">
            <summary>
            检查此 MailHelper 实例是否已经设置了 SmtpClient
            </summary>
            <returns>true代表已设置</returns>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.SetSmtpClient(System.Net.Mail.SmtpClient,System.Boolean)">
            <summary>
            设置 SmtpClient 实例 和是否自动释放Smtp的唯一入口
            1、将内部 计划数量 和 已完成数量 清零，重新统计以便自动释放SmtpClient
            2、若要对SmtpClent设置SendCompleted事件，请在调用此方法前进行设置
            </summary>
            <param name="mSmtpClient"> SmtpClient 实例</param>
            <param name="autoReleaseSmtp">设置在 MailHelper 类内部，发送完邮件后是否自动释放 SmtpClient 实例</param>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.ManualDisposeSmtp">
            <summary>
            释放 SmtpClient
            </summary>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.AutoDisposeSmtp">
            <summary>
            释放SmtpClient
            </summary>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.InnerDisposeSmtp">
            <summary>
            释放SmtpClient
            </summary>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.AddReceive(Rookey.Frame.Email.EmailAddrType,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            添加收件人、抄送人、密送人（每个类型中，若地址有重复，只保留第一个地址）
            </summary>
            <param name="type">类型：收件人、抄送人、密送人</param>
            <param name="addressList">Email地址列表</param>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.AddReceive(Rookey.Frame.Email.EmailAddrType,System.String,System.String)">
            <summary>
            添加收件人、抄送人、密送人（每个类型中，若地址有重复，只保留第一个地址）
            </summary>
            <param name="type">类型：收件人、抄送人、密送人</param>
            <param name="address">Email地址</param>
            <param name="displayName">显示名称</param>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.AddReceive(Rookey.Frame.Email.EmailAddrType,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            添加收件人、抄送人、密送人（每个类型中，若地址有重复，只保留第一个地址）
            </summary>
            <param name="type">类型：收件人、抄送人、密送人</param>
            <param name="dicAddress">Email地址，显示名称</param>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.AddAttachment(System.Net.Mail.Attachment)">
            <summary>
            添加单个附件
            </summary>
            <param name="attachment">Attachment附件实例</param>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.AddAttachment(System.String,System.String)">
            <summary>
            添加单个附件
            </summary>
            <param name="fieldPath">待上传文件路径</param>
            <param name="fileName">文件显示名称（不带后缀）</param>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.AddInlineAttachment(System.String,System.String)">
            <summary>
            添加内嵌资源（eg：图片，mp3等等）
            </summary>
            <param name="fieldPath">内嵌资源的文件路径</param>
            <param name="cidName">设置此附件的 MIME 内容 ID</param>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.AddAlterViewPath(System.String)">
            <summary>
            添加一个电子邮件不同格式的副本。
            </summary>
            <param name="filePath">包含电子邮件内容的文件路径</param>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.AddAlterViewContent(System.String)">
            <summary>
            添加一个电子邮件不同格式的副本。
            </summary>
            <param name="mailContent">电子邮件内容</param>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.AddAlterViewStream(System.IO.Stream)">
            <summary>
            添加一个电子邮件不同格式的副本。
            </summary>
            <param name="contentStream">电子邮件内容流</param>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.AddAlternateView(System.Net.Mail.AlternateView)">
            <summary>
            添加一个电子邮件不同格式的副本。
            </summary>
            <param name="alternateView">电子邮件视图</param>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.SetBatchMailCount(System.Int64)">
            <summary>
            计划批量发送邮件的个数，配合自动释放SmtpClient。（批量邮件发送不调用此方法就不会自动释放SmtpClient）
            0、此方法可以在发送邮件方法之前或之后调用
            1、只有设置后才会自动根据 m_autoDisposeSmtp 字段进行释放SmtpClient。
            2、若 m_autoDisposeSmtp = false 即由自己手动进行设置的无需调用此方法设置预计邮件数
            </summary>
            <param name="preCount">计划邮件数量</param>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.SendOneMail">
            <summary>
            同步发送一封Email
            </summary>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.SendBatchMail">
            <summary>
            批量同步发送Email
            </summary>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.SendAsyncCancel">
            <summary>
            取消异步邮件发送
            </summary>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.InnerSendMessage">
            <summary>
            发送Email
            </summary>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.InnerSetAddress(Rookey.Frame.Email.EmailAddrType,System.Net.Mail.MailMessage)">
            <summary>
            将收件人、抄送人、密送人添加到 MailMessage 中
            </summary>
            <param name="type">收件人、抄送人、密送人</param>
            <param name="mMailMessage">待发送的MailMessage类</param>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.InnerDisposeMessage(System.Net.Mail.MailMessage)">
            <summary>
            释放 MailMessage 对象
            </summary>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.SendCompleted4Dispose(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            声明在 SmtpClient.SendAsync() 执行完后释放相关对象的回调方法   最后触发的委托
            </summary>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.GetAwaitMailCountAsync">
            <summary>
            获取异步发送邮件，MessageQueue队列中缓冲的待发邮件数量
            （使用者可根据此数量来限制邮件数量，以免内存浪费）
            </summary>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.CheckSendMail">
            <summary>
            发送邮件前检查需要设置的信息是否完整，收集（提示+错误）信息
            </summary>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.CheckSendMail4Info">
            <summary>
            发送邮件前检查需要设置的信息是否完整，收集 提示 信息
            </summary>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.CheckSendMail4Error">
            <summary>
            发送邮件前检查需要设置的信息是否完整，收集 错误 信息
            </summary>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.InnerCheckSendMail4Info(System.Collections.Generic.Dictionary{Rookey.Frame.Email.MailInfoType,System.String})">
            <summary>
            发送邮件前检查需要设置的信息是否完整，收集 提示 信息
            </summary>
            <param name="dicMsg">将检查信息收集到此集合</param>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.InnerCheckSendMail4Error(System.Collections.Generic.Dictionary{Rookey.Frame.Email.MailInfoType,System.String})">
            <summary>
            发送邮件前检查需要设置的信息是否完整，收集 错误 信息
            </summary>
            <param name="dicMsg">将检查信息收集到此集合</param>
        </member>
        <member name="M:Rookey.Frame.Email.MailHelper.InnerCheckAddress(System.Text.StringBuilder,System.Collections.Generic.Dictionary{Rookey.Frame.Email.MailInfoType,System.String},Rookey.Frame.Email.EmailAddrType)">
            <summary>
            检查 发件人、收件人、抄送人、密送人 邮箱地址
            </summary>
            <param name="infoBuilder">StringBuilder实例</param>
            <param name="dicMsg">将检查信息收集到此集合</param>
            <param name="type">接收邮件地址类型</param>
        </member>
        <member name="P:Rookey.Frame.Email.MailHelper.AsycUserState">
            <summary>
            在执行异步发送时传递的对象，用于传递给异步发生完成时调用的方法 OnSendCompleted 。
            </summary>
        </member>
        <member name="P:Rookey.Frame.Email.MailHelper.Client">
            <summary>
            SmtpClient对象
            </summary>
        </member>
        <member name="P:Rookey.Frame.Email.MailHelper.From">
            <summary>
            设置此电子邮件的发信人地址。
            </summary>
        </member>
        <member name="P:Rookey.Frame.Email.MailHelper.FromDisplayName">
            <summary>
            设置此电子邮件的发信人地址。
            </summary>
        </member>
        <member name="P:Rookey.Frame.Email.MailHelper.Subject">
            <summary>
            设置此电子邮件的主题。
            </summary>
        </member>
        <member name="P:Rookey.Frame.Email.MailHelper.Body">
            <summary>
            设置邮件正文。
            </summary>
        </member>
        <member name="P:Rookey.Frame.Email.MailHelper.IsBodyHtml">
            <summary>
            设置邮件正文是否为 Html 格式的值。
            </summary>
        </member>
        <member name="P:Rookey.Frame.Email.MailHelper.Priority">
            <summary>
            设置此电子邮件的优先级  0-Normal   1-Low   2-High
            默认Normal。
            </summary>
        </member>
        <member name="T:Rookey.Frame.Email.MailUserState">
            <summary>
            异步发送邮件时保存的信息，用于释放和传递数据
            </summary>
        </member>
        <member name="P:Rookey.Frame.Email.MailUserState.UserState">
            <summary>
            用户传递的状态对象
            </summary>
        </member>
        <member name="P:Rookey.Frame.Email.MailUserState.IsErrorHandle">
            <summary>
            当异步发送报错时可通过此标识是否已经处理该异常
            </summary>
        </member>
        <member name="T:Rookey.Frame.Email.MailAsyncHandle">
            <summary>
            委托（用于异步发送邮件）
            </summary>
            <param name="message">消息</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="T:Rookey.Frame.Email.MailSend">
            <summary>
            邮件发送类
            </summary>
        </member>
        <member name="M:Rookey.Frame.Email.MailSend.#ctor(Rookey.Frame.Email.MailSendParams,System.Boolean,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="sendParams">发送参数对象</param>
            <param name="mailAsyncMethod">异步发送回调方法</param>
            <param name="isSimple">是否单条发送</param>
            <param name="isAsync">是否异常发送</param>
        </member>
        <member name="M:Rookey.Frame.Email.MailSend.Send(System.String@,Rookey.Frame.Email.MailAsyncHandle)">
            <summary>
            发送邮件
            </summary>
            <param name="errMsg">错误信息</param>
            <param name="mailAsyncMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Rookey.Frame.Email.MailSend.SendMessage(System.String@)">
            <summary>
            发送邮件
            </summary>
            <param name="errMsg">反馈信息</param>
        </member>
        <member name="T:Rookey.Frame.Email.MailSendParams">
            <summary>
            邮件发送参数类
            </summary>
        </member>
        <member name="T:Rookey.Frame.Email.SmtpHelper">
            <summary>
            SmtpClient构造器
            使用注意事项：
            1、非线程安全类
            2、构造的SmtpClient 实例由外部进行Dispose()。SmtpHelper类只简单提供构造，不做释放操作。
            3、SmtpClient 没有提供 Finalize() 终结器，所以GC不会进行回收，只能由外部使用完后进行显示释放，否则会发生内存泄露问题
            </summary>
        </member>
        <member name="M:Rookey.Frame.Email.SmtpHelper.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            创建 SmtpHelper 实例
            </summary>
            <param name="host">设置 SMTP 主服务器</param>
            <param name="port">端口号</param>
            <param name="enableSsl">指定 SmtpClient 是否使用安全套接字层 (SSL) 加密连接。</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
        </member>
        <member name="M:Rookey.Frame.Email.SmtpHelper.#ctor(System.String,System.Int32,System.Boolean,System.Net.NetworkCredential)">
            <summary>
            创建 SmtpHelper 实例
            </summary>
            <param name="host">设置 SMTP 主服务器</param>
            <param name="port">端口号</param>
            <param name="enableSsl">指定 SmtpClient 是否使用安全套接字层 (SSL) 加密连接。</param>
            <param name="credential">设置用于验证发件人身份的凭据。</param>
        </member>
        <member name="M:Rookey.Frame.Email.SmtpHelper.#ctor(Rookey.Frame.Email.EmailType,System.Boolean,System.String,System.String)">
            <summary>
            创建 SmtpHelper 实例
            </summary>
            <param name="type">Email类型</param>
            <param name="enableSsl">指定 SmtpClient 是否使用安全套接字层 (SSL) 加密连接。</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
        </member>
        <member name="M:Rookey.Frame.Email.SmtpHelper.#ctor(Rookey.Frame.Email.EmailType,System.Boolean,System.Net.NetworkCredential)">
            <summary>
            创建 SmtpHelper 实例
            </summary>
            <param name="type">Email类型</param>
            <param name="enableSsl">指定 SmtpClient 是否使用安全套接字层 (SSL) 加密连接。</param>
            <param name="credential">设置用于验证发件人身份的凭据。</param>
        </member>
        <member name="M:Rookey.Frame.Email.SmtpHelper.#ctor(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            创建 SmtpHelper 实例
            </summary>
            <param name="host">设置 SMTP 主服务器</param>
            <param name="port">端口号</param>
            <param name="enableSsl">指定 SmtpClient 是否使用安全套接字层 (SSL) 加密连接。</param>
            <param name="useDefaultCredentials">SMTP服务器是否传输系统默认凭证。</param>
        </member>
        <member name="M:Rookey.Frame.Email.SmtpHelper.#ctor(Rookey.Frame.Email.EmailType,System.Boolean,System.Boolean)">
            <summary>
            创建 SmtpHelper 实例
            </summary>
            <param name="type">Email类型</param>
            <param name="enableSsl">指定 SmtpClient 是否使用安全套接字层 (SSL) 加密连接。</param>
            <param name="useDefaultCredentials">SMTP服务器是否传输系统默认凭证。</param>
        </member>
        <member name="M:Rookey.Frame.Email.SmtpHelper.EmailTypeConfig(Rookey.Frame.Email.EmailType,System.Boolean)">
            <summary>
            根据Email类型创建SmtpClient
            </summary>
            <param name="type">Email类型</param>
            <param name="enableSsl">端口号会根据是否支持ssl而不同</param>
        </member>
        <member name="M:Rookey.Frame.Email.SmtpHelper.SetTimeout(System.Int32)">
            <summary>
            设置SmtpClient.Send() 调用的超时时间。
            SmtpClient默认 Timeout =  （100秒=100*1000毫秒）。
            应当根据“邮件大小、附件大小、加密耗时”等因素进行调整
            </summary>
        </member>
        <member name="M:Rookey.Frame.Email.SmtpHelper.SetDeliveryMethod(System.Int32)">
            <summary>
            设置 SmtpClient 如何处理待发的电子邮件。
            </summary>
            <param name="deliveryMethod">
            0、Network（默认）：电子邮件通过网络发送到 SMTP 服务器。
            1、SpecifiedPickupDirectory：将电子邮件复制到 SmtpClient.PickupDirectoryLocation 属性指定的目录，然后由外部应用程序传送。
            2、PickupDirectoryFromIis：将电子邮件复制到拾取目录，然后通过本地 Internet 信息服务 (IIS) 传送。
            </param>
        </member>
        <member name="M:Rookey.Frame.Email.SmtpHelper.AddClientCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            添加建立安全套接字层 (SSL) 连接的证书
            </summary>
        </member>
        <member name="P:Rookey.Frame.Email.SmtpHelper.SmtpClient">
            <summary>
            返回内部构造的SmtpClient实例
            </summary>
        </member>
    </members>
</doc>
